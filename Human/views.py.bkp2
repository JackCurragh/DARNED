# Create your views here.
from django.http import HttpResponse
from django.template import RequestContext,loader
from time import time
import MySQLdb
from django.core.paginator import Paginator,EmptyPage, PageNotAnInteger
from DARNED.forms import *
from models import *
from os import system
from xml.dom import minidom

pth = '/home/devil/Chinese/darned_temp/'


def range_based(request):
    assembly = request.GET['hs_assembly']
    chrom = request.GET['hs_chrom']
    seqtype = request.GET['seqtype']
    exotype = request.GET['exotype']
    flank = request.GET['flank']
    gene = request.GET.get('gene','')
    pubid = request.GET.get('pubid','')
    source = request.GET.get('hs_source','')
    end = request.GET.get('end','0')
    start = request.GET.get('start','0')
    coors = HSCoordinate.objects.filter(assembly=assembly,chrom=chrom,coordinate__gte=start,coordinate__lte=end).select_related(depth=2).extra(select={'gstart':'coordinate-%d'%int(flank),'gend':'coordinate+%d'%int(flank)}).order_by('coordinate')
    if seqtype !='A':
        if seqtype == 'E':
            if exotype == 'C':
                coors = coors.filter(exotype='E')
            elif exotype == '5':
                coors = coors.filter(exotype='5')
            elif exotype == '3':
                coors = coors.filter(exotype='3')
        elif seqtype == 'I':
            coors = coors.filter(seqtype='I')
        else:
            coors = coors.filter(seqtype='O')
    if source != '':
	print source
        coors = coors.filter(source__source = source)
    if pubid != '':
        coors = coors.filter(pubid__pubid=pubid)
    if gene != '':
        coors = coors.filter(gene__gene=gene)
    if len(coors) ==0:
        tmplt = loader.get_template("message.html")
        return HttpResponse(tmplt.render(RequestContext(request,{'message':'No result found for your query'})))
#############Bed File Part##########
    countfile = open(pth+"count")
    count = int(countfile.read())
    countfile.close()
    countfile = open(pth+"count",'w')
    countfile.write("%d"%((count+1)%200))
    countfile.close()
    bedfile = open("%sbed_%d.bed"%(pth,count),"w")
    bedfile.write('browser dense\ntrack name="Human RNA Editing" description="EDITING LOCATIONS" visibility=2 itemRgb="On"\n')
    for coor in coors:#need coloring here
        bedfile.write("chr%s\t%d\t%d\tchr%s.%d\t1000\t%s\t%d\t%d\t0,0,0\n"%(coor.chrom,coor.coordinate-1,coor.coordinate,coor.chrom,coor.coordinate,coor.strand,coor.coordinate-1,coor.coordinate))
    bedfile.close()
###################################
    tissuesearch = "hs_assembly=%s&hs_chrom=%s&seqtype=%s&exotype=%s&flank=%s&gene=%s&pubid=%s&start=%s&end=%s&hs_source="%(assembly,chrom,seqtype,exotype,flank,gene,pubid,start,end)
    genesearch = "hs_assembly=%s&hs_chrom=%s&seqtype=%s&exotype=%s&flank=%s&hs_source=%s&pubid=%s&start=%s&end=%s&gene="%(assembly,chrom,seqtype,exotype,flank,source,pubid,start,end)
    authorsearch = "hs_assembly=%s&hs_chrom=%s&seqtype=%s&exotype=%s&flank=%s&gene=%s&hs_source=%s&start=%s&end=%s&pubid="%(assembly,chrom,seqtype,exotype,flank,gene,source,start,end)
    exonsearch = "hs_assembly=%s&hs_chrom=%s&seqtype=%s&hs_source=%s&flank=%s&gene=%s&pubid=%s&start=%s&end=%s&exotype="%(assembly,chrom,seqtype,source,flank,gene,pubid,start,end)
    seqsearch = "hs_assembly=%s&hs_chrom=%s&hs_source=%s&exotype=%s&flank=%s&gene=%s&pubid=%s&start=%s&end=%s&seqtype="%(assembly,chrom,source,exotype,flank,gene,pubid,start,end)
    searchRes = {'coors':coors,
                'tissuesearch':tissuesearch,
                'genesearch':genesearch,
                'authorsearch':authorsearch,
                'exonsearch':exonsearch,
                'seqsearch':seqsearch,
                'assembly':assembly,
                'chrom':chrom,
                'start':start,
                'end':end,
                'seqtype':seqtype,
                'exotype':exotype,
                'gene':gene,
                'bed':count,
                'flank':flank
                }
    tmplt = loader.get_template('Human/result.html')
    rendred = tmplt.render(RequestContext(request,searchRes))
    return HttpResponse(rendred)
#############################################################################
#############################################################################
#######For sequence based analysis###########################################

###########Checking nucleotide sequence######################################
def nucleotide_check(seq):#
    nuc = set()
    nucl_bool = 0
    for line in seq:
        nuc |= set([c for c in line if c not in ' \n\r'])
    print nuc
    for n in nuc:
        if n.upper() not in ('ACGTRYKMSWBDHVNU'):#Replace if it gives error
            nucl_bool = 1
            break
    return nucl_bool
###########################Checking fasta file format########################
def fasta_nucleotide_check(fl):
    infile = open(fl)
    lines = infile.readlines()
    fasta_bool = 0
    if lines[0][0] == '>':
        fasta_bool = 1
    if fasta_bool == 1:
        dna_bool = nucleotide_check(lines[1:])
    else:
        dna_bool = nucleotide_check(lines)
    return fasta_bool,dna_bool
def seq_based(request):
    if request.method == 'POST':
        assembly =18# request.POST['assembly']
        countfile = open(pth+"count")
        count = int(countfile.read())
        countfile.close()
        countfile = open(pth+"count",'w')
        countfile.write("%d"%((count+1)%200))
        countfile.close()
        fl = "%stmp/seq%d.fa"%(pth,count)
        seqfile = open(fl,"w")
        seqfile.write(request.POST['seq'])
        seqfile.close()
	fasta_bool,dna_bool = fasta_nucleotide_check(fl)
	if dna_bool:
            tmplt = loader.get_template('message.html')
            return HttpResponse(tmplt.render(RequestContext(request,{'message':'Input file is not a DNA or RNA sequence file.<br /> Please go to searc page again'})))
	if not fasta_bool:
	    infile = open(fl)
	    seq = infile.read()
            infile.close()
	    outfile = open(fl, "w")
	    outfile.write(">userseq\n"+seq)
	    outfile.close()
			
        system ("%sexe/blastn -max_target_seqs 1 -evalue 10 -word_size 50 -outfmt 5 -dust no -db /home/devil/Desktop/Hsapiens/hg18/hg18 -query %stmp/seq%d.fa -out %stmp/seq%d.xml"%(pth,pth,count,pth,count))
        xmldoc = minidom.parse("%stmp/seq%d.xml"%(pth,count))
        hits = xmldoc.getElementsByTagName('Hit')
        data = []
        for hit in hits:
            chrom = hit.getElementsByTagName('Hit_def')[0].firstChild.data
            hit_hsps = hit.getElementsByTagName('Hit_hsps')
            for hit_hsp in hit_hsps:
                hsps = hit_hsp.getElementsByTagName('Hsp')
                for hsp in hsps:
                    tstart = int(hsp.getElementsByTagName('Hsp_hit-from')[0].firstChild.data)
                    tend = int(hsp.getElementsByTagName('Hsp_hit-to')[0].firstChild.data)
                    qstart = int(hsp.getElementsByTagName('Hsp_query-from')[0].firstChild.data)
                    strnd = hsp.getElementsByTagName('Hsp_hit-frame')[0].firstChild.data
                    qseq = hsp.getElementsByTagName('Hsp_qseq')[0].firstChild.data
                    tseq = hsp.getElementsByTagName('Hsp_hseq')[0].firstChild.data
                    match = hsp.getElementsByTagName('Hsp_midline')[0].firstChild.data
                    if strnd == '1':
                        strand = '+'
                    else:
                        strand = '-'
                        tstart,tend = tend,tstart
                    data.append([chrom[3:],tstart,tend,strand,[],assembly])
                    arraylen = len(data)
                    coord = []
                    editings = HSCoordinate.objects.filter(assembly=assembly,chrom=chrom[3:], coordinate__gte = tstart, coordinate__lte= tend, strand = strand)
                    for editing in editings:
                        if strand == '+':
                            coord.append(editing.coordinate)
                        else:
                            coord.append(editing.coordinate)
                    coord.sort()
                    trealpos = tstart
                    qrealpos = qstart
                    startbl = 0
                    spl = 0
                    nml = 0
                    qseqt = ""
                    tseqt = ""
                    matcht = ""
                    virtualSeqLen = len(tseq)
                    for j in range(virtualSeqLen):
                        if (j != 0 and j%50 == 0) or j == virtualSeqLen-1:
                            tseqt += "</b></td>"
                            qseqt += "</b></td>"
                            matcht += "</pre></b></td>"
                            if strand == '+':
                                data[arraylen-1][4].append([qstartpos,tstartpos,qseqt,matcht,tseqt,qrealpos-1,trealpos-1])
                            else:
                                data[arraylen-1][4].append([qstartpos,tend-tstartpos+tstart,qseqt,matcht,tseqt,qrealpos-1,tend+tstart-trealpos+1])
                            startbl = 0
                            spl = 0
                            nml = 0
                            qseqt = ""
                            tseqt = ""
                            matcht = ""
                        if startbl == 0:
                            qstartpos = qrealpos
                            tstartpos = trealpos
                            startbl = 1
                        if tseq[j] != '-':
                            trealpos += 1
                        if qseq[j] != '-':
                            qrealpos += 1
                        if trealpos-1 in coord:
                            if spl == 0 :
                                tseqt += "<td><b>"
                                qseqt += "<td><b>"
                                matcht += "<td><b><pre>"
                                spl = nml = 1
                            tseqt += "<font style='background-color:#BDBDBD'>%s</font>"%tseq[j]
                            qseqt += "<font style='background-color:#BDBDBD'>%s</font>"%qseq[j]
                            matcht += "<font style='background-color:#BDBDBD'>%s</font>"%match[j]
                        else:
                            if nml == 0:
                                tseqt += "<td><b>%s"%tseq[j]
                                qseqt += "<td><b>%s"%qseq[j]
                                matcht += "<td><b><pre>%s"%match[j]
                                nml = spl = 1
                            else:
                                tseqt += tseq[j]
                                qseqt += qseq[j]
                                matcht += match[j]

            tmplt = loader.get_template("Human/blast.html")
            return HttpResponse(tmplt.render(RequestContext(request,{'datas':data,'assembly':assembly})))
    else:
        tmplt = loader.get_template("message.html")
        return HttpResponse(tmplt.render(RequestContext(request,{'message':"Please go to search for query submission. "})))




####################Gene Based Searches#############################################

def geneBased(request):# Remove EST from Hereford
    if request.method == 'POST':
	seqname = request.POST['seqid']
	if len(seqname) == 0:
            tmplt = loader.get_template("message.html")
            return HttpResponse(tmplt.render(RequestContext(request, {'message':"Please go back to serach page and provide query RefGene or RefSeq ID."})))
        assembly = request.POST['hs_assembly']
        seqtype = request.POST['seqname']
        bl = 0
	gene = ''
        if seqtype == "refGene":
	    gene = seqname.upper()
            coors = HSCoordinate.objects.filter(assembly=assembly,gene__gene=seqname.upper())
            if len(coors)>0:
                bl = 1
        elif seqtype == "refSeq":
            conn = MySQLdb.connect(db='darned_hg%s'%assembly)
            cursor = conn.cursor()
            if cursor.execute("SELECT name2 from HG%s.refGene WHERE name='%s' LIMIT 1"%(assembly,seqname)):
                gene = cursor.fetchone()[0]
                coors = HSCoordinate.objects.filter(assembly=assembly,gene__gene=gene)
                if len(coors)>0:
                    bl = 1
            cursor.close()
            conn.close()
        if bl==1:
            countfile = open(pth+"count")
            count = int(countfile.read())
            countfile.close()
            countfile = open(pth+"count","w")
            countfile.write("%d"%((count+1)%200))
            countfile.close()
            coordinate = []
            chrom = ''
            for coor in coors:
                coordinate.append(coor.coordinate)
                chrom = coor.chrom
	    seqtype = 'A'
	    exotype = 'A'
	    flank = '0'
	    pubid = ''
	    source = ''
	    end = max(coordinate)+1
	    start = min(coordinate)-1
	    tissuesearch = "hs_assembly=%s&hs_chrom=%s&seqtype=%s&exotype=%s&flank=%s&gene=%s&pubid=%s&start=%s&end=%s&hs_source="%(assembly,chrom,seqtype,exotype,flank,gene,pubid,start,end)
	    genesearch = "hs_assembly=%s&hs_chrom=%s&seqtype=%s&exotype=%s&flank=%s&hs_source=%s&pubid=%s&start=%s&end=%s&gene="%(assembly,chrom,seqtype,exotype,flank,source,pubid,start,end)
	    authorsearch = "hs_assembly=%s&hs_chrom=%s&seqtype=%s&exotype=%s&flank=%s&gene=%s&hs_source=%s&start=%s&end=%s&pubid="%(assembly,chrom,seqtype,exotype,flank,gene,source,start,end)
	    exonsearch = "hs_assembly=%s&hs_chrom=%s&seqtype=%s&hs_source=%s&flank=%s&gene=%s&pubid=%s&start=%s&end=%s&exotype="%(assembly,chrom,seqtype,source,flank,gene,pubid,start,end)
	    seqsearch = "hs_assembly=%s&hs_chrom=%s&hs_source=%s&exotype=%s&flank=%s&gene=%s&pubid=%s&start=%s&end=%s&seqtype="%(assembly,chrom,source,exotype,flank,gene,pubid,start,end)
	    searchRes = {'coors':coors,
			'tissuesearch':tissuesearch,
			'genesearch':genesearch,
			'authorsearch':authorsearch,
			'exonsearch':exonsearch,
			'seqsearch':seqsearch,
			'assembly':assembly,
			'chrom':chrom,
			'start':start,
			'end':end,
			'seqtype':seqtype,
			'exotype':exotype,
			'gene':gene,
                        'bed':count,
                        'assembly':assembly
			}

            tmplt = loader.get_template("Human/result.html")
            return HttpResponse(tmplt.render(RequestContext(request,searchRes)))
        else:
            tmplt = loader.get_template('message.html')
            return HttpResponse(tmplt.render(RequestContext(request, {'message':"No Result Found"})))
    else:
        tmplt = loader.get_template('message.html')
        return HttpResponse(tmplt.render(RequestContext(request, {'message':"Please go to search page."})))
    


